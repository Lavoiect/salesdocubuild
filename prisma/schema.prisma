// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  OWNER //Payment management
  ADMIN //Inivte Users, Manage Users, Manage Agency
  USER //Create Document, Create Pages, Create ClassName
  GUEST //View Document, View Pages
}

enum Icon {
  settings
  chart
  calendar
  check
  chip
  compass
  database
  flag
  home
  info
  link
  lock
  messages
  notification
  payment
  power
  receipt
  shield
  star
  tune
  videorecorder
  wallet
  warning
  headphone
  send
  pipelines
  person
  category
  contact
  clipboardIcon
}

model User {
  id           String         @id @default(uuid())
  name         String
  avatarUrl    String         @db.Text
  email        String         @unique
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  role         Role           @default(USER)
  agencyId     String?
  Agency       Agency?        @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  

  Notification Notification[]

  @@index([agencyId])
}



model Agency {
  id               String                @id @default(uuid())
  name             String
  agencyLogo       String                @db.Text
  companyEmail     String                @db.Text
  companyPhone     String
  whiteLabel       Boolean               @default(true)
  address          String
  city             String
  zipCode          String
  state            String
  country          String
  users            User[]
  createdAt        DateTime              @default(now())
  updatedAt        DateTime              @updatedAt
  Invitation       Invitation[]
  Notification     Notification[]
  Subscription     Subscription[]
  AddOns           AddOns[]
  Media            Media[]
  Workspace       Workspace[]
  
  AgencySidebarOptions AgencySidebarOption[]

  
}


model Media {
  id           String     @id @default(uuid())
  type         String?
  name         String
  link         String     @unique
  agencyId String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  Agency      Agency @relation(fields: [agencyId], references: [id], onDelete: Cascade)

  @@index([agencyId])
}


model Document {
  id            String       @id @default(uuid())
  name          String
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  description   String?
  published     Boolean      @default(false)
  subDomainName String?      @unique
  favicon       String?      @db.Text
  type          String
  workspaceId   String
  Workspace     Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  DocumentPages DocumentPage[]
  ClassName     ClassName[]

  @@index([workspaceId])
}



model Workspace {
  id            String       @id @default(uuid())
  name          String
  type          String
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  description   String?
  published     Boolean      @default(false)
  subDomainName String?      @unique
  favicon       String?      @db.Text
  agencyId      String
  Agency        Agency   @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  Documents     Document[]
  ClassName     ClassName[]

  @@index([agencyId])
}



model ClassName {
  id         String   @id @default(uuid())
  name       String
  color      String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  documentId   String
  customData String?  @db.LongText
  Document     Document   @relation(fields: [documentId], references: [id], onDelete: Cascade)
  workspaceId String?
  Workspace   Workspace? @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@index([documentId])
  @@index([workspaceId])
}

model DocumentPage {
  id           String   @id @default(uuid())
  name         String
  pathName     String   @default("")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  visits       Int      @default(0)
  content      String?  @db.LongText
  order        Int
  previewImage String?  @db.Text
  documentId     String
  Document      Document   @relation(fields: [documentId], references: [id], onDelete: Cascade)


  @@index([documentId])
}

model AgencySidebarOption {
  id        String   @id @default(uuid())
  name      String   @default("Menu")
  link      String   @default("#")
  icon      Icon     @default(info)
  agencyId  String
  Agency    Agency?  @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([agencyId])
}


enum InvitationStatus {
  ACCEPTED
  REVOKED
  PENDING
}

model Invitation {
  id       String           @id @default(uuid())
  email    String           @unique
  agencyId String
  Agency   Agency           @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  status   InvitationStatus @default(PENDING)
  role     Role             @default(USER)

  @@index([agencyId])
}

model Notification {
  id           String  @id @default(uuid())
  notification String
  agencyId     String
  subAccountId String?
  userId       String

  User       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  Agency     Agency      @relation(fields: [agencyId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([agencyId])
  @@index([userId])
}

enum Plan {
  price_1OYxkqFj9oKEERu1NbKUxXxN
  price_1OYxkqFj9oKEERu1KfJGWxgN
}

model Subscription {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  plan      Plan?
  price     String?
  active    Boolean  @default(false)

  priceId              String
  customerId           String
  currentPeriodEndDate DateTime
  subscritiptionId     String   @unique

  agencyId String? @unique
  Agency   Agency? @relation(fields: [agencyId], references: [id])

  @@index([customerId])
}

model AddOns {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  active    Boolean  @default(false)
  priceId   String   @unique
  agencyId  String?
  Agency    Agency?  @relation(fields: [agencyId], references: [id])

  @@index([agencyId])
}